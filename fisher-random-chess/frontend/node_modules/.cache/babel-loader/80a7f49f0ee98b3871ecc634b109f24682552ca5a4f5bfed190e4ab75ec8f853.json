{"ast":null,"code":"var _jsxFileName = \"C:\\\\Develop\\\\Facultate\\\\AN_III\\\\SEM_II\\\\AI\\\\proiect AI\\\\chess_project_fac\\\\fisher-random-chess\\\\frontend\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport axios from \"axios\";\nimport { Chess } from \"chess.js\";\nimport Score from \"./Score.js\";\nimport GameModeSelection from \"./GameModeSelection\";\nimport \"../styles/Board.scss\";\nimport { io } from \"socket.io-client\";\nimport Chessboard3D from \"./Chessboard3D\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://127.0.0.1:5000\"); // Adresa backend-ului\n\nconst Board = () => {\n  _s();\n  const [gameMode, setGameMode] = useState(null); // \"ai\" sau \"friend\"\n  const [gameId, setGameId] = useState(null);\n\n  // State declarations\n  const [gameState, setGameState] = useState({\n    fen: \"start\",\n    moves: [],\n    scoreWhite: 0,\n    scoreBlack: 0,\n    isCheck: false,\n    isCheckmate: false,\n    turn: \"w\"\n  });\n  const [capturedPieces, setCapturedPieces] = useState({\n    white: [],\n    black: []\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState({});\n  const [learningData, setLearningData] = useState(null);\n\n  // Effects\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  useEffect(() => {\n    axios.get(\"http://127.0.0.1:5000/api/learning_data\").then(response => {\n      console.log(\"Learning Data fetched:\", response.data); // Debugging\n      setLearningData(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching learning data:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    // Evenimente WebSocket\n    socket.on(\"game_created\", data => {\n      setGameId(data.game_id);\n      setGameState({\n        fen: data.fen,\n        turn: \"w\"\n      });\n    });\n    socket.on(\"game_joined\", data => {\n      setGameId(data.game_id);\n      setGameState({\n        fen: data.fen,\n        turn: \"w\"\n      });\n    });\n    return () => {\n      socket.off(); // Dezactivează evenimentele la demontarea componentei\n    };\n  }, []);\n  useEffect(() => {\n    socket.on(\"move_made\", data => {\n      setGameState(prev => ({\n        ...prev,\n        fen: data.fen,\n        turn: data.turn\n      }));\n    });\n    socket.on(\"game_over\", data => {\n      alert(`Game over! Winner: ${data.winner}`);\n      setGameState(prev => ({\n        ...prev,\n        fen: data.fen,\n        turn: null\n      }));\n    });\n    return () => {\n      socket.off(\"move_made\");\n      socket.off(\"game_over\");\n    };\n  }, []);\n  useEffect(() => {\n    const syncGameState = async () => {\n      if (!gameId) return;\n      try {\n        const response = await axios.get(`http://127.0.0.1:5000/api/game_state/${gameId}`);\n        if (response.data.status === \"success\") {\n          setGameState(prev => ({\n            ...prev,\n            fen: response.data.fen,\n            turn: response.data.turn,\n            moves: response.data.moves\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error syncing game state:\", error);\n      }\n    };\n    const interval = setInterval(syncGameState, 2000); // Sincronizare la fiecare 2 secunde\n    return () => clearInterval(interval); // Curăță intervalul la demontarea componentei\n  }, [gameId]);\n  useEffect(() => {\n    socket.on(\"sync_game\", data => {\n      if (data.game_id === gameId) {\n        // Sincronizează starea jocului\n        axios.get(`http://127.0.0.1:5000/api/game_state/${gameId}`).then(response => {\n          if (response.data.status === \"success\") {\n            setGameState(prev => ({\n              ...prev,\n              fen: response.data.fen,\n              turn: response.data.turn,\n              moves: response.data.moves\n            }));\n          }\n        }).catch(error => console.error(\"Error syncing game state:\", error));\n      }\n    });\n    return () => {\n      socket.off(\"sync_game\");\n    };\n  }, [gameId]);\n\n  // API calls\n  const initializeGame = async () => {\n    try {\n      const [setupResponse, learningResponse] = await Promise.all([axios.get(\"http://127.0.0.1:5000/api/setup\"), axios.get(\"http://127.0.0.1:5000/api/learning_data\")]);\n      setGameState(prev => ({\n        ...prev,\n        fen: setupResponse.data\n      }));\n      setLearningData(learningResponse.data);\n    } catch (error) {\n      console.error(\"Error initializing game:\", error);\n    }\n  };\n  const fetchValidMoves = async square => {\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/api/legal_moves\", {\n        fen: gameState.fen,\n        square\n      });\n      const newHighlightedSquares = response.data.moves.reduce((acc, move) => ({\n        ...acc,\n        [move]: {\n          background: \"rgba(255, 255, 0, 0.4)\",\n          borderRadius: \"50%\"\n        }\n      }), {});\n      setHighlightedSquares(newHighlightedSquares);\n    } catch (error) {\n      console.error(\"Error fetching valid moves:\", error);\n    }\n  };\n  const startMultiplayerGame = () => {\n    socket.emit(\"create_game\");\n  };\n  const joinMultiplayerGame = () => {\n    if (!gameId) {\n      alert(\"Please enter a valid Game ID.\");\n      return;\n    }\n    socket.emit(\"join_game\", {\n      game_id: gameId\n    });\n  };\n\n  // Event handlers\n  const onDrop = ({\n    sourceSquare,\n    targetSquare\n  }) => {\n    const isPawnPromotion = checkPawnPromotion(sourceSquare, targetSquare);\n    const promotion = isPawnPromotion ? \"q\" : null;\n    const move = `${sourceSquare}${targetSquare}`;\n    socket.emit(\"make_move\", {\n      game_id: gameId,\n      move,\n      promotion\n    });\n  };\n  const onDropAI = ({\n    sourceSquare,\n    targetSquare\n  }) => {\n    const chess = new Chess(gameState.fen);\n\n    // Verifică dacă piesa este un pion\n    const piece = chess.get(sourceSquare);\n    if (!piece) {\n      alert(\"No piece on the selected square!\");\n      return;\n    }\n    console.log(\"Selected piece:\", piece); // Debugging\n\n    const isPawnPromotion = checkPawnPromotion(sourceSquare, targetSquare);\n    const promotion = isPawnPromotion ? \"q\" : null;\n    const move = chess.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: promotion // Promovare implicită\n    });\n    if (move === null) {\n      alert(\"Illegal move!\");\n      return;\n    }\n    console.log(\"Attempting move:\", move.san, \"FEN:\", chess.fen()); // Debugging\n\n    axios.post(\"http://127.0.0.1:5000/api/move\", {\n      fen: gameState.fen,\n      from: sourceSquare,\n      to: targetSquare,\n      promotion // Trimite promovarea\n    }).then(response => {\n      console.log(\"Move response:\", response.data); // Debugging\n      if (response.data.status === \"success\") {\n        setGameState(prev => ({\n          ...prev,\n          fen: response.data.fen,\n          turn: response.data.turn\n        }));\n      } else if (response.data.status === \"game_over\") {\n        alert(`Game over! Winner: ${response.data.winner}`);\n        resetGame(); // Resetează jocul automat\n      }\n    }).catch(error => {\n      console.error(\"Error making move:\", error);\n    });\n  };\n  const onDropMultiplayer = ({\n    sourceSquare,\n    targetSquare\n  }) => {\n    const move = `${sourceSquare}${targetSquare}`;\n    socket.emit(\"make_move\", {\n      game_id: gameId,\n      move\n    });\n  };\n  const onMouseOverSquare = square => {\n    try {\n      const chess = new Chess(gameState.fen);\n      if (chess.get(square)) {\n        fetchValidMoves(square);\n      }\n    } catch (error) {\n      console.error(\"Error checking piece:\", error);\n    }\n  };\n  const onMouseOutSquare = () => setHighlightedSquares({});\n  const resetGame = () => {\n    axios.get(\"http://127.0.0.1:5000/api/start_game\").then(response => {\n      setGameState({\n        fen: response.data.fen,\n        moves: [],\n        scoreWhite: 0,\n        scoreBlack: 0,\n        isCheck: false,\n        isCheckmate: false\n      });\n      setCapturedPieces({\n        white: [],\n        black: []\n      });\n    }).catch(error => console.error(\"Error resetting game:\", error));\n  };\n\n  // Helper functions\n  const checkPawnPromotion = (sourceSquare, targetSquare) => {\n    const isWhitePawn = gameState.fen.split(\" \")[1] === \"w\" && sourceSquare[1] === \"7\" && targetSquare[1] === \"8\";\n    const isBlackPawn = gameState.fen.split(\" \")[1] === \"b\" && sourceSquare[1] === \"2\" && targetSquare[1] === \"1\";\n    return isWhitePawn || isBlackPawn;\n  };\n  const makeMove = (sourceSquare, targetSquare) => {\n    const move = `${sourceSquare}${targetSquare}`;\n    socket.emit(\"make_move\", {\n      game_id,\n      move\n    });\n  };\n  const handleMoveResponse = response => {\n    if (response.data.status === \"success\") {\n      updateGameState(response.data);\n    } else if (response.data.status === \"game_over\") {\n      alert(response.data.message);\n\n      // Reîncarcă Learning Data\n      axios.get(\"http://127.0.0.1:5000/api/learning_data\").then(res => {\n        console.log(\"Learning Data fetched:\", res.data); // Debugging\n        setLearningData(res.data); // Actualizează Learning Data\n      }).catch(error => {\n        console.error(\"Error fetching learning data:\", error);\n      });\n      resetGame(); // Resetează jocul\n    } else {\n      alert(response.data.message || \"Invalid move.\");\n    }\n  };\n  const handleMoveError = error => {\n    console.error(\"Error making move:\", error);\n    alert(\"Invalid move or server error.\");\n  };\n  const updateGameState = data => {\n    setGameState(prev => ({\n      ...prev,\n      fen: data.fen,\n      moves: [...prev.moves, data.lastMove],\n      scoreWhite: data.score_white || prev.scoreWhite,\n      scoreBlack: data.score_black || prev.scoreBlack,\n      isCheck: data.is_check || false,\n      isCheckmate: data.is_checkmate || false\n    }));\n    setCapturedPieces({\n      white: data.captured_by_white || [],\n      black: data.captured_by_black || []\n    });\n  };\n\n  // Render\n  if (!gameMode) {\n    return /*#__PURE__*/_jsxDEV(GameModeSelection, {\n      onSelectMode: setGameMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 12\n    }, this);\n  }\n  if (gameMode === \"friend\") {\n    if (!gameId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Multiplayer Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Game ID\",\n          value: gameId || \"\",\n          onChange: e => setGameId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: joinMultiplayerGame,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startMultiplayerGame,\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Multiplayer Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game ID: \", gameId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Turn: \", gameState.turn === \"w\" ? \"White\" : \"Black\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n        position: gameState.fen,\n        onDrop: onDrop // Folosește onDrop pentru multiplayer\n        ,\n        onMouseOverSquare: onMouseOverSquare,\n        onMouseOutSquare: onMouseOutSquare,\n        squareStyles: highlightedSquares,\n        draggable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this);\n  }\n\n  // În loc de tabla veche, pentru test:\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"600px\",\n      height: \"600px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Chessboard3D, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"WypDTy1cttsqERIJfCyEGXlxFZ0=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Chessboard","axios","Chess","Score","GameModeSelection","io","Chessboard3D","jsxDEV","_jsxDEV","socket","Board","_s","gameMode","setGameMode","gameId","setGameId","gameState","setGameState","fen","moves","scoreWhite","scoreBlack","isCheck","isCheckmate","turn","capturedPieces","setCapturedPieces","white","black","highlightedSquares","setHighlightedSquares","learningData","setLearningData","initializeGame","get","then","response","console","log","data","catch","error","on","game_id","off","prev","alert","winner","syncGameState","status","interval","setInterval","clearInterval","setupResponse","learningResponse","Promise","all","fetchValidMoves","square","post","newHighlightedSquares","reduce","acc","move","background","borderRadius","startMultiplayerGame","emit","joinMultiplayerGame","onDrop","sourceSquare","targetSquare","isPawnPromotion","checkPawnPromotion","promotion","onDropAI","chess","piece","from","to","san","resetGame","onDropMultiplayer","onMouseOverSquare","onMouseOutSquare","isWhitePawn","split","isBlackPawn","makeMove","handleMoveResponse","updateGameState","message","res","handleMoveError","lastMove","score_white","score_black","is_check","is_checkmate","captured_by_white","captured_by_black","onSelectMode","fileName","_jsxFileName","lineNumber","columnNumber","children","type","placeholder","value","onChange","e","target","onClick","className","position","squareStyles","draggable","style","width","height","_c","$RefreshReg$"],"sources":["C:/Develop/Facultate/AN_III/SEM_II/AI/proiect AI/chess_project_fac/fisher-random-chess/frontend/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport axios from \"axios\";\r\nimport { Chess } from \"chess.js\";\r\nimport Score from \"./Score.js\";\r\nimport GameModeSelection from \"./GameModeSelection\";\r\nimport \"../styles/Board.scss\";\r\nimport { io } from \"socket.io-client\";\r\nimport Chessboard3D from \"./Chessboard3D\";\r\n\r\nconst socket = io(\"http://127.0.0.1:5000\"); // Adresa backend-ului\r\n\r\nconst Board = () => {\r\n  const [gameMode, setGameMode] = useState(null); // \"ai\" sau \"friend\"\r\n  const [gameId, setGameId] = useState(null);\r\n\r\n  // State declarations\r\n  const [gameState, setGameState] = useState({\r\n    fen: \"start\",\r\n    moves: [],\r\n    scoreWhite: 0,\r\n    scoreBlack: 0,\r\n    isCheck: false,\r\n    isCheckmate: false,\r\n    turn: \"w\",\r\n  });\r\n\r\n  const [capturedPieces, setCapturedPieces] = useState({\r\n    white: [],\r\n    black: [],\r\n  });\r\n\r\n  const [highlightedSquares, setHighlightedSquares] = useState({});\r\n  const [learningData, setLearningData] = useState(null);\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    initializeGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://127.0.0.1:5000/api/learning_data\")\r\n      .then((response) => {\r\n        console.log(\"Learning Data fetched:\", response.data); // Debugging\r\n        setLearningData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching learning data:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Evenimente WebSocket\r\n    socket.on(\"game_created\", (data) => {\r\n      setGameId(data.game_id);\r\n      setGameState({ fen: data.fen, turn: \"w\" });\r\n    });\r\n\r\n    socket.on(\"game_joined\", (data) => {\r\n      setGameId(data.game_id);\r\n      setGameState({ fen: data.fen, turn: \"w\" });\r\n    });\r\n\r\n    return () => {\r\n      socket.off(); // Dezactivează evenimentele la demontarea componentei\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"move_made\", (data) => {\r\n      setGameState((prev) => ({\r\n        ...prev,\r\n        fen: data.fen,\r\n        turn: data.turn,\r\n      }));\r\n    });\r\n\r\n    socket.on(\"game_over\", (data) => {\r\n      alert(`Game over! Winner: ${data.winner}`);\r\n      setGameState((prev) => ({\r\n        ...prev,\r\n        fen: data.fen,\r\n        turn: null,\r\n      }));\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"move_made\");\r\n      socket.off(\"game_over\");\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const syncGameState = async () => {\r\n      if (!gameId) return;\r\n\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:5000/api/game_state/${gameId}`\r\n        );\r\n        if (response.data.status === \"success\") {\r\n          setGameState((prev) => ({\r\n            ...prev,\r\n            fen: response.data.fen,\r\n            turn: response.data.turn,\r\n            moves: response.data.moves,\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error syncing game state:\", error);\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(syncGameState, 2000); // Sincronizare la fiecare 2 secunde\r\n    return () => clearInterval(interval); // Curăță intervalul la demontarea componentei\r\n  }, [gameId]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"sync_game\", (data) => {\r\n      if (data.game_id === gameId) {\r\n        // Sincronizează starea jocului\r\n        axios\r\n          .get(`http://127.0.0.1:5000/api/game_state/${gameId}`)\r\n          .then((response) => {\r\n            if (response.data.status === \"success\") {\r\n              setGameState((prev) => ({\r\n                ...prev,\r\n                fen: response.data.fen,\r\n                turn: response.data.turn,\r\n                moves: response.data.moves,\r\n              }));\r\n            }\r\n          })\r\n          .catch((error) => console.error(\"Error syncing game state:\", error));\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"sync_game\");\r\n    };\r\n  }, [gameId]);\r\n\r\n  // API calls\r\n  const initializeGame = async () => {\r\n    try {\r\n      const [setupResponse, learningResponse] = await Promise.all([\r\n        axios.get(\"http://127.0.0.1:5000/api/setup\"),\r\n        axios.get(\"http://127.0.0.1:5000/api/learning_data\"),\r\n      ]);\r\n\r\n      setGameState((prev) => ({ ...prev, fen: setupResponse.data }));\r\n      setLearningData(learningResponse.data);\r\n    } catch (error) {\r\n      console.error(\"Error initializing game:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchValidMoves = async (square) => {\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://127.0.0.1:5000/api/legal_moves\",\r\n        {\r\n          fen: gameState.fen,\r\n          square,\r\n        }\r\n      );\r\n\r\n      const newHighlightedSquares = response.data.moves.reduce(\r\n        (acc, move) => ({\r\n          ...acc,\r\n          [move]: {\r\n            background: \"rgba(255, 255, 0, 0.4)\",\r\n            borderRadius: \"50%\",\r\n          },\r\n        }),\r\n        {}\r\n      );\r\n\r\n      setHighlightedSquares(newHighlightedSquares);\r\n    } catch (error) {\r\n      console.error(\"Error fetching valid moves:\", error);\r\n    }\r\n  };\r\n\r\n  const startMultiplayerGame = () => {\r\n    socket.emit(\"create_game\");\r\n  };\r\n\r\n  const joinMultiplayerGame = () => {\r\n    if (!gameId) {\r\n      alert(\"Please enter a valid Game ID.\");\r\n      return;\r\n    }\r\n\r\n    socket.emit(\"join_game\", { game_id: gameId });\r\n  };\r\n\r\n  // Event handlers\r\n  const onDrop = ({ sourceSquare, targetSquare }) => {\r\n    const isPawnPromotion = checkPawnPromotion(sourceSquare, targetSquare);\r\n    const promotion = isPawnPromotion ? \"q\" : null;\r\n\r\n    const move = `${sourceSquare}${targetSquare}`;\r\n    socket.emit(\"make_move\", { game_id: gameId, move, promotion });\r\n  };\r\n\r\n  const onDropAI = ({ sourceSquare, targetSquare }) => {\r\n    const chess = new Chess(gameState.fen);\r\n\r\n    // Verifică dacă piesa este un pion\r\n    const piece = chess.get(sourceSquare);\r\n    if (!piece) {\r\n      alert(\"No piece on the selected square!\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Selected piece:\", piece); // Debugging\r\n\r\n    const isPawnPromotion = checkPawnPromotion(sourceSquare, targetSquare);\r\n    const promotion = isPawnPromotion ? \"q\" : null;\r\n\r\n    const move = chess.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: promotion, // Promovare implicită\r\n    });\r\n\r\n    if (move === null) {\r\n      alert(\"Illegal move!\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Attempting move:\", move.san, \"FEN:\", chess.fen()); // Debugging\r\n\r\n    axios\r\n      .post(\"http://127.0.0.1:5000/api/move\", {\r\n        fen: gameState.fen,\r\n        from: sourceSquare,\r\n        to: targetSquare,\r\n        promotion, // Trimite promovarea\r\n      })\r\n      .then((response) => {\r\n        console.log(\"Move response:\", response.data); // Debugging\r\n        if (response.data.status === \"success\") {\r\n          setGameState((prev) => ({\r\n            ...prev,\r\n            fen: response.data.fen,\r\n            turn: response.data.turn,\r\n          }));\r\n        } else if (response.data.status === \"game_over\") {\r\n          alert(`Game over! Winner: ${response.data.winner}`);\r\n          resetGame(); // Resetează jocul automat\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error making move:\", error);\r\n      });\r\n  };\r\n\r\n  const onDropMultiplayer = ({ sourceSquare, targetSquare }) => {\r\n    const move = `${sourceSquare}${targetSquare}`;\r\n    socket.emit(\"make_move\", { game_id: gameId, move });\r\n  };\r\n\r\n  const onMouseOverSquare = (square) => {\r\n    try {\r\n      const chess = new Chess(gameState.fen);\r\n      if (chess.get(square)) {\r\n        fetchValidMoves(square);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error checking piece:\", error);\r\n    }\r\n  };\r\n\r\n  const onMouseOutSquare = () => setHighlightedSquares({});\r\n\r\n  const resetGame = () => {\r\n    axios\r\n      .get(\"http://127.0.0.1:5000/api/start_game\")\r\n      .then((response) => {\r\n        setGameState({\r\n          fen: response.data.fen,\r\n          moves: [],\r\n          scoreWhite: 0,\r\n          scoreBlack: 0,\r\n          isCheck: false,\r\n          isCheckmate: false,\r\n        });\r\n        setCapturedPieces({ white: [], black: [] });\r\n      })\r\n      .catch((error) => console.error(\"Error resetting game:\", error));\r\n  };\r\n\r\n  // Helper functions\r\n  const checkPawnPromotion = (sourceSquare, targetSquare) => {\r\n    const isWhitePawn =\r\n      gameState.fen.split(\" \")[1] === \"w\" &&\r\n      sourceSquare[1] === \"7\" &&\r\n      targetSquare[1] === \"8\";\r\n    const isBlackPawn =\r\n      gameState.fen.split(\" \")[1] === \"b\" &&\r\n      sourceSquare[1] === \"2\" &&\r\n      targetSquare[1] === \"1\";\r\n    return isWhitePawn || isBlackPawn;\r\n  };\r\n\r\n  const makeMove = (sourceSquare, targetSquare) => {\r\n    const move = `${sourceSquare}${targetSquare}`;\r\n    socket.emit(\"make_move\", { game_id, move });\r\n  };\r\n\r\n  const handleMoveResponse = (response) => {\r\n    if (response.data.status === \"success\") {\r\n      updateGameState(response.data);\r\n    } else if (response.data.status === \"game_over\") {\r\n      alert(response.data.message);\r\n\r\n      // Reîncarcă Learning Data\r\n      axios\r\n        .get(\"http://127.0.0.1:5000/api/learning_data\")\r\n        .then((res) => {\r\n          console.log(\"Learning Data fetched:\", res.data); // Debugging\r\n          setLearningData(res.data); // Actualizează Learning Data\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching learning data:\", error);\r\n        });\r\n\r\n      resetGame(); // Resetează jocul\r\n    } else {\r\n      alert(response.data.message || \"Invalid move.\");\r\n    }\r\n  };\r\n\r\n  const handleMoveError = (error) => {\r\n    console.error(\"Error making move:\", error);\r\n    alert(\"Invalid move or server error.\");\r\n  };\r\n\r\n  const updateGameState = (data) => {\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      fen: data.fen,\r\n      moves: [...prev.moves, data.lastMove],\r\n      scoreWhite: data.score_white || prev.scoreWhite,\r\n      scoreBlack: data.score_black || prev.scoreBlack,\r\n      isCheck: data.is_check || false,\r\n      isCheckmate: data.is_checkmate || false,\r\n    }));\r\n\r\n    setCapturedPieces({\r\n      white: data.captured_by_white || [],\r\n      black: data.captured_by_black || [],\r\n    });\r\n  };\r\n\r\n  // Render\r\n  if (!gameMode) {\r\n    return <GameModeSelection onSelectMode={setGameMode} />;\r\n  }\r\n\r\n  if (gameMode === \"friend\") {\r\n    if (!gameId) {\r\n      return (\r\n        <div>\r\n          <h2>Multiplayer Game</h2>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Game ID\"\r\n            value={gameId || \"\"}\r\n            onChange={(e) => setGameId(e.target.value)}\r\n          />\r\n          <button onClick={joinMultiplayerGame}>Join Game</button>\r\n          <button onClick={startMultiplayerGame}>Start New Game</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h2>Multiplayer Game</h2>\r\n        <p>Game ID: {gameId}</p>\r\n        <div className=\"turn-indicator\">\r\n          <h3>Turn: {gameState.turn === \"w\" ? \"White\" : \"Black\"}</h3>\r\n        </div>\r\n        <Chessboard\r\n          position={gameState.fen}\r\n          onDrop={onDrop} // Folosește onDrop pentru multiplayer\r\n          onMouseOverSquare={onMouseOverSquare}\r\n          onMouseOutSquare={onMouseOutSquare}\r\n          squareStyles={highlightedSquares}\r\n          draggable={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // În loc de tabla veche, pentru test:\r\n  return (\r\n    <div style={{ width: \"600px\", height: \"600px\" }}>\r\n      <Chessboard3D />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAO,sBAAsB;AAC7B,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMK,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAE1C;EACA,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC;IACzCoB,GAAG,EAAE,OAAO;IACZC,KAAK,EAAE,EAAE;IACTC,UAAU,EAAE,CAAC;IACbC,UAAU,EAAE,CAAC;IACbC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,KAAK;IAClBC,IAAI,EAAE;EACR,CAAC,CAAC;EAEF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC;IACnD6B,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAACiC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACdkC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAENlC,SAAS,CAAC,MAAM;IACdE,KAAK,CACFiC,GAAG,CAAC,yCAAyC,CAAC,CAC9CC,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MACtDP,eAAe,CAACI,QAAQ,CAACG,IAAI,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN1C,SAAS,CAAC,MAAM;IACd;IACAU,MAAM,CAACiC,EAAE,CAAC,cAAc,EAAGH,IAAI,IAAK;MAClCxB,SAAS,CAACwB,IAAI,CAACI,OAAO,CAAC;MACvB1B,YAAY,CAAC;QAAEC,GAAG,EAAEqB,IAAI,CAACrB,GAAG;QAAEM,IAAI,EAAE;MAAI,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEFf,MAAM,CAACiC,EAAE,CAAC,aAAa,EAAGH,IAAI,IAAK;MACjCxB,SAAS,CAACwB,IAAI,CAACI,OAAO,CAAC;MACvB1B,YAAY,CAAC;QAAEC,GAAG,EAAEqB,IAAI,CAACrB,GAAG;QAAEM,IAAI,EAAE;MAAI,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEF,OAAO,MAAM;MACXf,MAAM,CAACmC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN7C,SAAS,CAAC,MAAM;IACdU,MAAM,CAACiC,EAAE,CAAC,WAAW,EAAGH,IAAI,IAAK;MAC/BtB,YAAY,CAAE4B,IAAI,KAAM;QACtB,GAAGA,IAAI;QACP3B,GAAG,EAAEqB,IAAI,CAACrB,GAAG;QACbM,IAAI,EAAEe,IAAI,CAACf;MACb,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEFf,MAAM,CAACiC,EAAE,CAAC,WAAW,EAAGH,IAAI,IAAK;MAC/BO,KAAK,CAAC,sBAAsBP,IAAI,CAACQ,MAAM,EAAE,CAAC;MAC1C9B,YAAY,CAAE4B,IAAI,KAAM;QACtB,GAAGA,IAAI;QACP3B,GAAG,EAAEqB,IAAI,CAACrB,GAAG;QACbM,IAAI,EAAE;MACR,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,MAAM;MACXf,MAAM,CAACmC,GAAG,CAAC,WAAW,CAAC;MACvBnC,MAAM,CAACmC,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN7C,SAAS,CAAC,MAAM;IACd,MAAMiD,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI,CAAClC,MAAM,EAAE;MAEb,IAAI;QACF,MAAMsB,QAAQ,GAAG,MAAMnC,KAAK,CAACiC,GAAG,CAC9B,wCAAwCpB,MAAM,EAChD,CAAC;QACD,IAAIsB,QAAQ,CAACG,IAAI,CAACU,MAAM,KAAK,SAAS,EAAE;UACtChC,YAAY,CAAE4B,IAAI,KAAM;YACtB,GAAGA,IAAI;YACP3B,GAAG,EAAEkB,QAAQ,CAACG,IAAI,CAACrB,GAAG;YACtBM,IAAI,EAAEY,QAAQ,CAACG,IAAI,CAACf,IAAI;YACxBL,KAAK,EAAEiB,QAAQ,CAACG,IAAI,CAACpB;UACvB,CAAC,CAAC,CAAC;QACL;MACF,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAED,MAAMS,QAAQ,GAAGC,WAAW,CAACH,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;IACnD,OAAO,MAAMI,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,CAACpC,MAAM,CAAC,CAAC;EAEZf,SAAS,CAAC,MAAM;IACdU,MAAM,CAACiC,EAAE,CAAC,WAAW,EAAGH,IAAI,IAAK;MAC/B,IAAIA,IAAI,CAACI,OAAO,KAAK7B,MAAM,EAAE;QAC3B;QACAb,KAAK,CACFiC,GAAG,CAAC,wCAAwCpB,MAAM,EAAE,CAAC,CACrDqB,IAAI,CAAEC,QAAQ,IAAK;UAClB,IAAIA,QAAQ,CAACG,IAAI,CAACU,MAAM,KAAK,SAAS,EAAE;YACtChC,YAAY,CAAE4B,IAAI,KAAM;cACtB,GAAGA,IAAI;cACP3B,GAAG,EAAEkB,QAAQ,CAACG,IAAI,CAACrB,GAAG;cACtBM,IAAI,EAAEY,QAAQ,CAACG,IAAI,CAACf,IAAI;cACxBL,KAAK,EAAEiB,QAAQ,CAACG,IAAI,CAACpB;YACvB,CAAC,CAAC,CAAC;UACL;QACF,CAAC,CAAC,CACDqB,KAAK,CAAEC,KAAK,IAAKJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;MACxE;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXhC,MAAM,CAACmC,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,CAAC9B,MAAM,CAAC,CAAC;;EAEZ;EACA,MAAMmB,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC1DvD,KAAK,CAACiC,GAAG,CAAC,iCAAiC,CAAC,EAC5CjC,KAAK,CAACiC,GAAG,CAAC,yCAAyC,CAAC,CACrD,CAAC;MAEFjB,YAAY,CAAE4B,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE3B,GAAG,EAAEmC,aAAa,CAACd;MAAK,CAAC,CAAC,CAAC;MAC9DP,eAAe,CAACsB,gBAAgB,CAACf,IAAI,CAAC;IACxC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAMgB,eAAe,GAAG,MAAOC,MAAM,IAAK;IACxC,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMnC,KAAK,CAAC0D,IAAI,CAC/B,uCAAuC,EACvC;QACEzC,GAAG,EAAEF,SAAS,CAACE,GAAG;QAClBwC;MACF,CACF,CAAC;MAED,MAAME,qBAAqB,GAAGxB,QAAQ,CAACG,IAAI,CAACpB,KAAK,CAAC0C,MAAM,CACtD,CAACC,GAAG,EAAEC,IAAI,MAAM;QACd,GAAGD,GAAG;QACN,CAACC,IAAI,GAAG;UACNC,UAAU,EAAE,wBAAwB;UACpCC,YAAY,EAAE;QAChB;MACF,CAAC,CAAC,EACF,CAAC,CACH,CAAC;MAEDnC,qBAAqB,CAAC8B,qBAAqB,CAAC;IAC9C,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,MAAMyB,oBAAoB,GAAGA,CAAA,KAAM;IACjCzD,MAAM,CAAC0D,IAAI,CAAC,aAAa,CAAC;EAC5B,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,CAACtD,MAAM,EAAE;MACXgC,KAAK,CAAC,+BAA+B,CAAC;MACtC;IACF;IAEArC,MAAM,CAAC0D,IAAI,CAAC,WAAW,EAAE;MAAExB,OAAO,EAAE7B;IAAO,CAAC,CAAC;EAC/C,CAAC;;EAED;EACA,MAAMuD,MAAM,GAAGA,CAAC;IAAEC,YAAY;IAAEC;EAAa,CAAC,KAAK;IACjD,MAAMC,eAAe,GAAGC,kBAAkB,CAACH,YAAY,EAAEC,YAAY,CAAC;IACtE,MAAMG,SAAS,GAAGF,eAAe,GAAG,GAAG,GAAG,IAAI;IAE9C,MAAMT,IAAI,GAAG,GAAGO,YAAY,GAAGC,YAAY,EAAE;IAC7C9D,MAAM,CAAC0D,IAAI,CAAC,WAAW,EAAE;MAAExB,OAAO,EAAE7B,MAAM;MAAEiD,IAAI;MAAEW;IAAU,CAAC,CAAC;EAChE,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAC;IAAEL,YAAY;IAAEC;EAAa,CAAC,KAAK;IACnD,MAAMK,KAAK,GAAG,IAAI1E,KAAK,CAACc,SAAS,CAACE,GAAG,CAAC;;IAEtC;IACA,MAAM2D,KAAK,GAAGD,KAAK,CAAC1C,GAAG,CAACoC,YAAY,CAAC;IACrC,IAAI,CAACO,KAAK,EAAE;MACV/B,KAAK,CAAC,kCAAkC,CAAC;MACzC;IACF;IAEAT,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEuC,KAAK,CAAC,CAAC,CAAC;;IAEvC,MAAML,eAAe,GAAGC,kBAAkB,CAACH,YAAY,EAAEC,YAAY,CAAC;IACtE,MAAMG,SAAS,GAAGF,eAAe,GAAG,GAAG,GAAG,IAAI;IAE9C,MAAMT,IAAI,GAAGa,KAAK,CAACb,IAAI,CAAC;MACtBe,IAAI,EAAER,YAAY;MAClBS,EAAE,EAAER,YAAY;MAChBG,SAAS,EAAEA,SAAS,CAAE;IACxB,CAAC,CAAC;IAEF,IAAIX,IAAI,KAAK,IAAI,EAAE;MACjBjB,KAAK,CAAC,eAAe,CAAC;MACtB;IACF;IAEAT,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEyB,IAAI,CAACiB,GAAG,EAAE,MAAM,EAAEJ,KAAK,CAAC1D,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEhEjB,KAAK,CACF0D,IAAI,CAAC,gCAAgC,EAAE;MACtCzC,GAAG,EAAEF,SAAS,CAACE,GAAG;MAClB4D,IAAI,EAAER,YAAY;MAClBS,EAAE,EAAER,YAAY;MAChBG,SAAS,CAAE;IACb,CAAC,CAAC,CACDvC,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MAC9C,IAAIH,QAAQ,CAACG,IAAI,CAACU,MAAM,KAAK,SAAS,EAAE;QACtChC,YAAY,CAAE4B,IAAI,KAAM;UACtB,GAAGA,IAAI;UACP3B,GAAG,EAAEkB,QAAQ,CAACG,IAAI,CAACrB,GAAG;UACtBM,IAAI,EAAEY,QAAQ,CAACG,IAAI,CAACf;QACtB,CAAC,CAAC,CAAC;MACL,CAAC,MAAM,IAAIY,QAAQ,CAACG,IAAI,CAACU,MAAM,KAAK,WAAW,EAAE;QAC/CH,KAAK,CAAC,sBAAsBV,QAAQ,CAACG,IAAI,CAACQ,MAAM,EAAE,CAAC;QACnDkC,SAAS,CAAC,CAAC,CAAC,CAAC;MACf;IACF,CAAC,CAAC,CACDzC,KAAK,CAAEC,KAAK,IAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC,CAAC;EACN,CAAC;EAED,MAAMyC,iBAAiB,GAAGA,CAAC;IAAEZ,YAAY;IAAEC;EAAa,CAAC,KAAK;IAC5D,MAAMR,IAAI,GAAG,GAAGO,YAAY,GAAGC,YAAY,EAAE;IAC7C9D,MAAM,CAAC0D,IAAI,CAAC,WAAW,EAAE;MAAExB,OAAO,EAAE7B,MAAM;MAAEiD;IAAK,CAAC,CAAC;EACrD,CAAC;EAED,MAAMoB,iBAAiB,GAAIzB,MAAM,IAAK;IACpC,IAAI;MACF,MAAMkB,KAAK,GAAG,IAAI1E,KAAK,CAACc,SAAS,CAACE,GAAG,CAAC;MACtC,IAAI0D,KAAK,CAAC1C,GAAG,CAACwB,MAAM,CAAC,EAAE;QACrBD,eAAe,CAACC,MAAM,CAAC;MACzB;IACF,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAM2C,gBAAgB,GAAGA,CAAA,KAAMtD,qBAAqB,CAAC,CAAC,CAAC,CAAC;EAExD,MAAMmD,SAAS,GAAGA,CAAA,KAAM;IACtBhF,KAAK,CACFiC,GAAG,CAAC,sCAAsC,CAAC,CAC3CC,IAAI,CAAEC,QAAQ,IAAK;MAClBnB,YAAY,CAAC;QACXC,GAAG,EAAEkB,QAAQ,CAACG,IAAI,CAACrB,GAAG;QACtBC,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,CAAC;QACbC,UAAU,EAAE,CAAC;QACbC,OAAO,EAAE,KAAK;QACdC,WAAW,EAAE;MACf,CAAC,CAAC;MACFG,iBAAiB,CAAC;QAAEC,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAC,CAAC;IAC7C,CAAC,CAAC,CACDY,KAAK,CAAEC,KAAK,IAAKJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EACpE,CAAC;;EAED;EACA,MAAMgC,kBAAkB,GAAGA,CAACH,YAAY,EAAEC,YAAY,KAAK;IACzD,MAAMc,WAAW,GACfrE,SAAS,CAACE,GAAG,CAACoE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IACnChB,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,IACvBC,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG;IACzB,MAAMgB,WAAW,GACfvE,SAAS,CAACE,GAAG,CAACoE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IACnChB,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,IACvBC,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG;IACzB,OAAOc,WAAW,IAAIE,WAAW;EACnC,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAClB,YAAY,EAAEC,YAAY,KAAK;IAC/C,MAAMR,IAAI,GAAG,GAAGO,YAAY,GAAGC,YAAY,EAAE;IAC7C9D,MAAM,CAAC0D,IAAI,CAAC,WAAW,EAAE;MAAExB,OAAO;MAAEoB;IAAK,CAAC,CAAC;EAC7C,CAAC;EAED,MAAM0B,kBAAkB,GAAIrD,QAAQ,IAAK;IACvC,IAAIA,QAAQ,CAACG,IAAI,CAACU,MAAM,KAAK,SAAS,EAAE;MACtCyC,eAAe,CAACtD,QAAQ,CAACG,IAAI,CAAC;IAChC,CAAC,MAAM,IAAIH,QAAQ,CAACG,IAAI,CAACU,MAAM,KAAK,WAAW,EAAE;MAC/CH,KAAK,CAACV,QAAQ,CAACG,IAAI,CAACoD,OAAO,CAAC;;MAE5B;MACA1F,KAAK,CACFiC,GAAG,CAAC,yCAAyC,CAAC,CAC9CC,IAAI,CAAEyD,GAAG,IAAK;QACbvD,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEsD,GAAG,CAACrD,IAAI,CAAC,CAAC,CAAC;QACjDP,eAAe,CAAC4D,GAAG,CAACrD,IAAI,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD,CAAC,CAAC;MAEJwC,SAAS,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,MAAM;MACLnC,KAAK,CAACV,QAAQ,CAACG,IAAI,CAACoD,OAAO,IAAI,eAAe,CAAC;IACjD;EACF,CAAC;EAED,MAAME,eAAe,GAAIpD,KAAK,IAAK;IACjCJ,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1CK,KAAK,CAAC,+BAA+B,CAAC;EACxC,CAAC;EAED,MAAM4C,eAAe,GAAInD,IAAI,IAAK;IAChCtB,YAAY,CAAE4B,IAAI,KAAM;MACtB,GAAGA,IAAI;MACP3B,GAAG,EAAEqB,IAAI,CAACrB,GAAG;MACbC,KAAK,EAAE,CAAC,GAAG0B,IAAI,CAAC1B,KAAK,EAAEoB,IAAI,CAACuD,QAAQ,CAAC;MACrC1E,UAAU,EAAEmB,IAAI,CAACwD,WAAW,IAAIlD,IAAI,CAACzB,UAAU;MAC/CC,UAAU,EAAEkB,IAAI,CAACyD,WAAW,IAAInD,IAAI,CAACxB,UAAU;MAC/CC,OAAO,EAAEiB,IAAI,CAAC0D,QAAQ,IAAI,KAAK;MAC/B1E,WAAW,EAAEgB,IAAI,CAAC2D,YAAY,IAAI;IACpC,CAAC,CAAC,CAAC;IAEHxE,iBAAiB,CAAC;MAChBC,KAAK,EAAEY,IAAI,CAAC4D,iBAAiB,IAAI,EAAE;MACnCvE,KAAK,EAAEW,IAAI,CAAC6D,iBAAiB,IAAI;IACnC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,IAAI,CAACxF,QAAQ,EAAE;IACb,oBAAOJ,OAAA,CAACJ,iBAAiB;MAACiG,YAAY,EAAExF;IAAY;MAAAyF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzD;EAEA,IAAI7F,QAAQ,KAAK,QAAQ,EAAE;IACzB,IAAI,CAACE,MAAM,EAAE;MACX,oBACEN,OAAA;QAAAkG,QAAA,gBACElG,OAAA;UAAAkG,QAAA,EAAI;QAAgB;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBjG,OAAA;UACEmG,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,eAAe;UAC3BC,KAAK,EAAE/F,MAAM,IAAI,EAAG;UACpBgG,QAAQ,EAAGC,CAAC,IAAKhG,SAAS,CAACgG,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACFjG,OAAA;UAAQyG,OAAO,EAAE7C,mBAAoB;UAAAsC,QAAA,EAAC;QAAS;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxDjG,OAAA;UAAQyG,OAAO,EAAE/C,oBAAqB;UAAAwC,QAAA,EAAC;QAAc;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC;IAEV;IAEA,oBACEjG,OAAA;MAAAkG,QAAA,gBACElG,OAAA;QAAAkG,QAAA,EAAI;MAAgB;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBjG,OAAA;QAAAkG,QAAA,GAAG,WAAS,EAAC5F,MAAM;MAAA;QAAAwF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBjG,OAAA;QAAK0G,SAAS,EAAC,gBAAgB;QAAAR,QAAA,eAC7BlG,OAAA;UAAAkG,QAAA,GAAI,QAAM,EAAC1F,SAAS,CAACQ,IAAI,KAAK,GAAG,GAAG,OAAO,GAAG,OAAO;QAAA;UAAA8E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC,eACNjG,OAAA,CAACR,UAAU;QACTmH,QAAQ,EAAEnG,SAAS,CAACE,GAAI;QACxBmD,MAAM,EAAEA,MAAO,CAAC;QAAA;QAChBc,iBAAiB,EAAEA,iBAAkB;QACrCC,gBAAgB,EAAEA,gBAAiB;QACnCgC,YAAY,EAAEvF,kBAAmB;QACjCwF,SAAS,EAAE;MAAK;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;;EAEA;EACA,oBACEjG,OAAA;IAAK8G,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAd,QAAA,eAC9ClG,OAAA,CAACF,YAAY;MAAAgG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAAC9F,EAAA,CAzYID,KAAK;AAAA+G,EAAA,GAAL/G,KAAK;AA2YX,eAAeA,KAAK;AAAC,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}