{"ast":null,"code":"var _jsxFileName = \"C:\\\\Develop\\\\Facultate\\\\AN_III\\\\SEM_II\\\\AI\\\\proiect AI\\\\chess_project_fac\\\\fisher-random-chess\\\\frontend\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport Score from \"./Score.js\";\nimport GameModeSelection from \"./GameModeSelection\";\nimport \"../styles/Board.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [gameMode, setGameMode] = useState(null); // \"ai\" or \"friend\"\n  const [gameId, setGameId] = useState(null);\n\n  // State declarations\n  const [gameState, setGameState] = useState({\n    fen: \"start\",\n    moves: [],\n    scoreWhite: 0,\n    scoreBlack: 0,\n    isCheck: false,\n    isCheckmate: false\n  });\n  const [capturedPieces, setCapturedPieces] = useState({\n    white: [],\n    black: []\n  });\n  const [highlightedSquares, setHighlightedSquares] = useState({});\n  const [learningData, setLearningData] = useState(null);\n\n  // Mock JSON data\n  const mockLearningData = {\n    games_played: 42,\n    piece_values: {\n      pawn: 1,\n      knight: 3,\n      bishop: 3,\n      rook: 5,\n      queen: 9,\n      king: Infinity\n    }\n  };\n  const mockSetupData = \"start\";\n  const mockLegalMoves = {\n    moves: [\"e4\", \"d4\", \"c4\"]\n  };\n  const mockMoveResponse = {\n    status: \"success\",\n    fen: \"new-fen\",\n    lastMove: \"e2e4\",\n    score_white: 1,\n    score_black: 0,\n    is_check: false,\n    is_checkmate: false,\n    captured_by_white: [],\n    captured_by_black: []\n  };\n\n  // Effects\n  useEffect(() => {\n    initializeGame();\n  }, []);\n  useEffect(() => {\n    setLearningData(mockLearningData);\n  }, []);\n\n  // Functions\n  const initializeGame = () => {\n    setGameState(prev => ({\n      ...prev,\n      fen: mockSetupData\n    }));\n    setLearningData(mockLearningData);\n  };\n  const fetchValidMoves = square => {\n    const newHighlightedSquares = mockLegalMoves.moves.reduce((acc, move) => ({\n      ...acc,\n      [move]: {\n        background: \"rgba(255, 255, 0, 0.4)\",\n        borderRadius: \"50%\"\n      }\n    }), {});\n    setHighlightedSquares(newHighlightedSquares);\n  };\n  const startMultiplayerGame = () => {\n    setGameId(\"mock-game-id\");\n    setGameState({\n      fen: mockSetupData,\n      moves: []\n    });\n  };\n  const joinMultiplayerGame = () => {\n    if (!gameId) {\n      alert(\"Please enter a valid Game ID.\");\n      return;\n    }\n    setGameState({\n      fen: mockSetupData,\n      moves: []\n    });\n  };\n  const onDrop = ({\n    sourceSquare,\n    targetSquare\n  }) => {\n    const isPawnPromotion = checkPawnPromotion(sourceSquare, targetSquare);\n    const promotion = isPawnPromotion ? \"q\" : null;\n    handleMoveResponse(mockMoveResponse);\n  };\n  const onMouseOverSquare = square => {\n    try {\n      const chess = new Chess(gameState.fen);\n      if (chess.get(square)) {\n        fetchValidMoves(square);\n      }\n    } catch (error) {\n      console.error(\"Error checking piece:\", error);\n    }\n  };\n  const onMouseOutSquare = () => setHighlightedSquares({});\n  const resetGame = () => {\n    setGameState({\n      fen: mockSetupData,\n      moves: [],\n      scoreWhite: 0,\n      scoreBlack: 0,\n      isCheck: false,\n      isCheckmate: false\n    });\n    setCapturedPieces({\n      white: [],\n      black: []\n    });\n  };\n  const checkPawnPromotion = (sourceSquare, targetSquare) => {\n    const isWhitePawn = gameState.fen.split(\" \")[1] === \"w\" && sourceSquare[1] === \"7\" && targetSquare[1] === \"8\";\n    const isBlackPawn = gameState.fen.split(\" \")[1] === \"b\" && sourceSquare[1] === \"2\" && targetSquare[1] === \"1\";\n    return isWhitePawn || isBlackPawn;\n  };\n  const handleMoveResponse = data => {\n    if (data.status === \"success\") {\n      updateGameState(data);\n    } else if (data.status === \"game_over\") {\n      alert(data.message);\n      setLearningData(mockLearningData);\n      resetGame();\n    } else {\n      alert(data.message || \"Invalid move.\");\n    }\n  };\n  const updateGameState = data => {\n    setGameState(prev => ({\n      ...prev,\n      fen: data.fen,\n      moves: [...prev.moves, data.lastMove],\n      scoreWhite: data.score_white || prev.scoreWhite,\n      scoreBlack: data.score_black || prev.scoreBlack,\n      isCheck: data.is_check || false,\n      isCheckmate: data.is_checkmate || false\n    }));\n    setCapturedPieces({\n      white: data.captured_by_white || [],\n      black: data.captured_by_black || []\n    });\n  };\n\n  // Render\n  if (!gameMode) {\n    return /*#__PURE__*/_jsxDEV(GameModeSelection, {\n      onSelectMode: setGameMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 12\n    }, this);\n  }\n  if (gameMode === \"friend\") {\n    if (!gameId) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Multiplayer Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Game ID\",\n          value: gameId || \"\",\n          onChange: e => setGameId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: joinMultiplayerGame,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startMultiplayerGame,\n          children: \"Start New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Multiplayer Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game ID: \", gameId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game with AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(Score, {\n          scoreBlack: gameState.scoreBlack,\n          scoreWhite: gameState.scoreWhite,\n          isCheck: gameState.isCheck,\n          isCheckmate: gameState.isCheckmate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), learningData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"learning-data\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Learning Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Games Played:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), \" \", learningData.games_played]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Piece Values:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: Object.entries(learningData.piece_values).map(([piece, value]) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [piece, \": \", value.toFixed(2)]\n            }, piece, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chessboard-container\",\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          position: gameState.fen,\n          onDrop: onDrop,\n          onMouseOverSquare: onMouseOverSquare,\n          onMouseOutSquare: onMouseOutSquare,\n          squareStyles: highlightedSquares,\n          draggable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captured-pieces\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Captured by Player:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pieces\",\n            children: capturedPieces.black.map((piece, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `/assets/chess-pieces/${piece}.png`,\n              alt: piece\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"captured-pieces\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Captured by Bot:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pieces\",\n            children: capturedPieces.white.map((piece, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `/assets/chess-pieces/${piece}.png`,\n              alt: piece\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"4okUL4KNGq16O8hGUJnoKo5GSAM=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Chessboard","Chess","Score","GameModeSelection","jsxDEV","_jsxDEV","Board","_s","gameMode","setGameMode","gameId","setGameId","gameState","setGameState","fen","moves","scoreWhite","scoreBlack","isCheck","isCheckmate","capturedPieces","setCapturedPieces","white","black","highlightedSquares","setHighlightedSquares","learningData","setLearningData","mockLearningData","games_played","piece_values","pawn","knight","bishop","rook","queen","king","Infinity","mockSetupData","mockLegalMoves","mockMoveResponse","status","lastMove","score_white","score_black","is_check","is_checkmate","captured_by_white","captured_by_black","initializeGame","prev","fetchValidMoves","square","newHighlightedSquares","reduce","acc","move","background","borderRadius","startMultiplayerGame","joinMultiplayerGame","alert","onDrop","sourceSquare","targetSquare","isPawnPromotion","checkPawnPromotion","promotion","handleMoveResponse","onMouseOverSquare","chess","get","error","console","onMouseOutSquare","resetGame","isWhitePawn","split","isBlackPawn","data","updateGameState","message","onSelectMode","fileName","_jsxFileName","lineNumber","columnNumber","children","type","placeholder","value","onChange","e","target","onClick","className","Object","entries","map","piece","toFixed","position","squareStyles","draggable","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Develop/Facultate/AN_III/SEM_II/AI/proiect AI/chess_project_fac/fisher-random-chess/frontend/src/components/Board.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport Score from \"./Score.js\";\r\nimport GameModeSelection from \"./GameModeSelection\";\r\nimport \"../styles/Board.scss\";\r\n\r\nconst Board = () => {\r\n  const [gameMode, setGameMode] = useState(null); // \"ai\" or \"friend\"\r\n  const [gameId, setGameId] = useState(null);\r\n\r\n  // State declarations\r\n  const [gameState, setGameState] = useState({\r\n    fen: \"start\",\r\n    moves: [],\r\n    scoreWhite: 0,\r\n    scoreBlack: 0,\r\n    isCheck: false,\r\n    isCheckmate: false,\r\n  });\r\n\r\n  const [capturedPieces, setCapturedPieces] = useState({\r\n    white: [],\r\n    black: [],\r\n  });\r\n\r\n  const [highlightedSquares, setHighlightedSquares] = useState({});\r\n  const [learningData, setLearningData] = useState(null);\r\n\r\n  // Mock JSON data\r\n  const mockLearningData = {\r\n    games_played: 42,\r\n    piece_values: {\r\n      pawn: 1,\r\n      knight: 3,\r\n      bishop: 3,\r\n      rook: 5,\r\n      queen: 9,\r\n      king: Infinity,\r\n    },\r\n  };\r\n\r\n  const mockSetupData = \"start\";\r\n\r\n  const mockLegalMoves = {\r\n    moves: [\"e4\", \"d4\", \"c4\"],\r\n  };\r\n\r\n  const mockMoveResponse = {\r\n    status: \"success\",\r\n    fen: \"new-fen\",\r\n    lastMove: \"e2e4\",\r\n    score_white: 1,\r\n    score_black: 0,\r\n    is_check: false,\r\n    is_checkmate: false,\r\n    captured_by_white: [],\r\n    captured_by_black: [],\r\n  };\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    initializeGame();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLearningData(mockLearningData);\r\n  }, []);\r\n\r\n  // Functions\r\n  const initializeGame = () => {\r\n    setGameState((prev) => ({ ...prev, fen: mockSetupData }));\r\n    setLearningData(mockLearningData);\r\n  };\r\n\r\n  const fetchValidMoves = (square) => {\r\n    const newHighlightedSquares = mockLegalMoves.moves.reduce(\r\n      (acc, move) => ({\r\n        ...acc,\r\n        [move]: {\r\n          background: \"rgba(255, 255, 0, 0.4)\",\r\n          borderRadius: \"50%\",\r\n        },\r\n      }),\r\n      {}\r\n    );\r\n\r\n    setHighlightedSquares(newHighlightedSquares);\r\n  };\r\n\r\n  const startMultiplayerGame = () => {\r\n    setGameId(\"mock-game-id\");\r\n    setGameState({ fen: mockSetupData, moves: [] });\r\n  };\r\n\r\n  const joinMultiplayerGame = () => {\r\n    if (!gameId) {\r\n      alert(\"Please enter a valid Game ID.\");\r\n      return;\r\n    }\r\n\r\n    setGameState({ fen: mockSetupData, moves: [] });\r\n  };\r\n\r\n  const onDrop = ({ sourceSquare, targetSquare }) => {\r\n    const isPawnPromotion = checkPawnPromotion(sourceSquare, targetSquare);\r\n    const promotion = isPawnPromotion ? \"q\" : null;\r\n\r\n    handleMoveResponse(mockMoveResponse);\r\n  };\r\n\r\n  const onMouseOverSquare = (square) => {\r\n    try {\r\n      const chess = new Chess(gameState.fen);\r\n      if (chess.get(square)) {\r\n        fetchValidMoves(square);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error checking piece:\", error);\r\n    }\r\n  };\r\n\r\n  const onMouseOutSquare = () => setHighlightedSquares({});\r\n\r\n  const resetGame = () => {\r\n    setGameState({\r\n      fen: mockSetupData,\r\n      moves: [],\r\n      scoreWhite: 0,\r\n      scoreBlack: 0,\r\n      isCheck: false,\r\n      isCheckmate: false,\r\n    });\r\n    setCapturedPieces({ white: [], black: [] });\r\n  };\r\n\r\n  const checkPawnPromotion = (sourceSquare, targetSquare) => {\r\n    const isWhitePawn =\r\n      gameState.fen.split(\" \")[1] === \"w\" &&\r\n      sourceSquare[1] === \"7\" &&\r\n      targetSquare[1] === \"8\";\r\n    const isBlackPawn =\r\n      gameState.fen.split(\" \")[1] === \"b\" &&\r\n      sourceSquare[1] === \"2\" &&\r\n      targetSquare[1] === \"1\";\r\n    return isWhitePawn || isBlackPawn;\r\n  };\r\n\r\n  const handleMoveResponse = (data) => {\r\n    if (data.status === \"success\") {\r\n      updateGameState(data);\r\n    } else if (data.status === \"game_over\") {\r\n      alert(data.message);\r\n      setLearningData(mockLearningData);\r\n      resetGame();\r\n    } else {\r\n      alert(data.message || \"Invalid move.\");\r\n    }\r\n  };\r\n\r\n  const updateGameState = (data) => {\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      fen: data.fen,\r\n      moves: [...prev.moves, data.lastMove],\r\n      scoreWhite: data.score_white || prev.scoreWhite,\r\n      scoreBlack: data.score_black || prev.scoreBlack,\r\n      isCheck: data.is_check || false,\r\n      isCheckmate: data.is_checkmate || false,\r\n    }));\r\n\r\n    setCapturedPieces({\r\n      white: data.captured_by_white || [],\r\n      black: data.captured_by_black || [],\r\n    });\r\n  };\r\n\r\n  // Render\r\n  if (!gameMode) {\r\n    return <GameModeSelection onSelectMode={setGameMode} />;\r\n  }\r\n\r\n  if (gameMode === \"friend\") {\r\n    if (!gameId) {\r\n      return (\r\n        <div>\r\n          <h2>Multiplayer Game</h2>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Game ID\"\r\n            value={gameId || \"\"}\r\n            onChange={(e) => setGameId(e.target.value)}\r\n          />\r\n          <button onClick={joinMultiplayerGame}>Join Game</button>\r\n          <button onClick={startMultiplayerGame}>Start New Game</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h2>Multiplayer Game</h2>\r\n        <p>Game ID: {gameId}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"chess-game\">\r\n      <header>\r\n        <h2>Game with AI</h2>\r\n        <button onClick={resetGame}>Reset Game</button>\r\n      </header>\r\n\r\n      <div className=\"game-container\">\r\n        <div className=\"left-panel\">\r\n          <Score\r\n            scoreBlack={gameState.scoreBlack}\r\n            scoreWhite={gameState.scoreWhite}\r\n            isCheck={gameState.isCheck}\r\n            isCheckmate={gameState.isCheckmate}\r\n          />\r\n\r\n          {learningData && (\r\n            <div className=\"learning-data\">\r\n              <h3>Learning Data</h3>\r\n              <p>\r\n                <strong>Games Played:</strong> {learningData.games_played}\r\n              </p>\r\n              <h4>Piece Values:</h4>\r\n              <ul>\r\n                {Object.entries(learningData.piece_values).map(\r\n                  ([piece, value]) => (\r\n                    <li key={piece}>\r\n                      {piece}: {value.toFixed(2)}\r\n                    </li>\r\n                  )\r\n                )}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"chessboard-container\">\r\n          <Chessboard\r\n            position={gameState.fen}\r\n            onDrop={onDrop}\r\n            onMouseOverSquare={onMouseOverSquare}\r\n            onMouseOutSquare={onMouseOutSquare}\r\n            squareStyles={highlightedSquares}\r\n            draggable={true}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"right-panel\">\r\n          <div className=\"captured-pieces\">\r\n            <h3>Captured by Player:</h3>\r\n            <div className=\"pieces\">\r\n              {capturedPieces.black.map((piece, index) => (\r\n                <img\r\n                  key={index}\r\n                  src={`/assets/chess-pieces/${piece}.png`}\r\n                  alt={piece}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"captured-pieces\">\r\n            <h3>Captured by Bot:</h3>\r\n            <div className=\"pieces\">\r\n              {capturedPieces.white.map((piece, index) => (\r\n                <img\r\n                  key={index}\r\n                  src={`/assets/chess-pieces/${piece}.png`}\r\n                  alt={piece}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}